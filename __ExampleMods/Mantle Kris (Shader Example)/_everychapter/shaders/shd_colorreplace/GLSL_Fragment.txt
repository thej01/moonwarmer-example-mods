#version 120
#define LOWPREC 
#define lowp
#define mediump
#define highp
#define precision
// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes

uniform sampler2D gm_BaseTexture;

uniform bool gm_PS_FogEnabled;
uniform vec4 gm_FogColour;
uniform bool gm_AlphaTestEnabled;
uniform float gm_AlphaRefValue;

void DoAlphaTest(vec4 SrcColour)
{
	if (gm_AlphaTestEnabled)
	{
		if (SrcColour.a <= gm_AlphaRefValue)
		{
			discard;
		}
	}
}

void DoFog(inout vec4 SrcColour, float fogval)
{
	if (gm_PS_FogEnabled)
	{
		SrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); 
	}
}

#define _YY_GLSL_ 1
#define MAX_COLORS 20
varying vec2 v_vTexcoord;
varying vec4 v_vColour;
uniform float u_replaceColor_r[MAX_COLORS];
uniform float u_replaceColor_g[MAX_COLORS];
uniform float u_replaceColor_b[MAX_COLORS];
uniform float u_newColor_r[MAX_COLORS];
uniform float u_newColor_g[MAX_COLORS];
uniform float u_newColor_b[MAX_COLORS];
uniform int u_colorCount;

void main()
{
	vec4 texColorUnmodified = texture2D(gm_BaseTexture, v_vTexcoord);
    vec3 texColorNoAlpha = vec3(texColorUnmodified);
	vec4 texColor = v_vColour * texColorUnmodified;
	
	for (int i = 0; i < u_colorCount; i++)
	{   
		vec3 rColor = vec3(u_replaceColor_r[i], u_replaceColor_g[i], u_replaceColor_b[i]);
		if (texColorNoAlpha == rColor)
		{
			vec3 nColor = vec3(u_newColor_r[i], u_newColor_g[i], u_newColor_b[i]);
			texColor = v_vColour * vec4(nColor, 1);
			break;
		}
	}
	
    gl_FragColor = texColor;
}
